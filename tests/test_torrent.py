import os
import unittest

from pyto.bencoding import bdecode
from pyto.torrent import Torrent, metainfo, _validate_structure

TEST_FILE_DIR = os.path.dirname(os.path.abspath(__file__))
# DATA_DIR is TEST_FILE_DIR/data
DATA_DIR = os.path.join(TEST_FILE_DIR, 'data')


class TestMetainfo(unittest.TestCase):
    def test_validate_structure(self):
        """Test the _validate_structure function"""
        # Call _validate_structure with twice the same object: it should always return True
        success_test_cases = [
            {'string': 'http://example.com/announce', 'int': 42, 'list': [1, 2]},
            {'dict': {'list': [1, 2, 3], 'int': 1}, 'str': 'str'},
        ]

        for test in success_test_cases:
            with self.subTest(test=test):
                self.assertTrue(_validate_structure(test, test))

        # Dictionaries in 'data' are allowed to have keys missing from the schema
        self.assertTrue(_validate_structure({'unused': 0, 'used': 1}, {'used': 1}))

        # Diverging data structures
        failure_test_cases = [
            ({'present': 0}, {'present': 0, 'missing': 1}),
            ([1, 2, 'string not int'], [1, 2, 3])
        ]

        for data, schema in failure_test_cases:
            with self.subTest(data=data, schema=schema):
                self.assertFalse(_validate_structure(data, schema))

    def test_metainfo_success(self):
        """Test the metainfo function by comparing its output to torrent generated by other
        software"""

        # List directories in DATA_DIR/files which will be used for this test. Matching torrent
        # files generated by another software must be found in DATA_DIR/torrent files/
        test_cases = ['single_file', 'multiple_files']

        for directory in test_cases:
            dirpath = os.path.join(DATA_DIR, 'files', directory)
            torrent_file = os.path.join(DATA_DIR, 'torrent_files', directory + '.torrent')

            with self.subTest(directory=directory):
                with open(torrent_file, "rb") as f:
                    m_target = bdecode(f.read())

                piece_length = m_target[b'info'][b'piece length']
                m_computed = metainfo(dirpath, piece_length, 'http://example.com:8080/announce')

                if b'files' in m_target[b'info']:
                    info_keys = [b'files']
                else:
                    info_keys = [b'length']
                info_keys += [b'pieces']

                for key in info_keys:
                    self.assertEqual(m_computed[b'info'][key], m_target[b'info'][key])


class TestTorrentCreation(unittest.TestCase):
    def test_from_file(self):
        torrent_dir = os.path.join(DATA_DIR, "torrent_files")
        for file in os.listdir(torrent_dir):
            filename = os.path.join(torrent_dir, os.fsdecode(file))
            with self.subTest(filename=filename):
                Torrent.from_file(filename)


if __name__ == '__main__':
        unittest.main()
