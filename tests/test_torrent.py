import asyncio
import os
import shutil
import tempfile
import unittest

from pyto.bencoding import bdecode
from pyto.torrent import Torrent, metainfo, _validate_structure

TEST_FILE_DIR = os.path.dirname(os.path.abspath(__file__))
# DATA_DIR is TEST_FILE_DIR/data
DATA_DIR = os.path.join(TEST_FILE_DIR, 'data')


class TestMetainfo(unittest.TestCase):
    def test_validate_structure(self):
        """Check _validate_structure() output against a few handmade cases"""
        # Call _validate_structure with twice the same object: it should always return True
        success_test_cases = [
            {'string': 'http://example.com/announce', 'int': 42, 'list': [1, 2]},
            {'dict': {'list': [1, 2, 3], 'int': 1}, 'str': 'str'},
        ]

        for test in success_test_cases:
            with self.subTest(test=test):
                self.assertTrue(_validate_structure(test, test))

        # Dictionaries in 'data' are allowed to have keys missing from the schema
        self.assertTrue(_validate_structure({'unused': 0, 'used': 1}, {'used': 1}))

        # Diverging data structures
        failure_test_cases = [
            ({'present': 0}, {'present': 0, 'missing': 1}),
            ([1, 2, 'string not int'], [1, 2, 3])
        ]

        for data, schema in failure_test_cases:
            with self.subTest(data=data, schema=schema):
                self.assertFalse(_validate_structure(data, schema))

    def test_metainfo_success(self):
        """Compare metainfo() output to torrent files generated by other software"""
        # List directories in DATA_DIR/files which will be used for this test. Matching
        # torrent files generated by another software must be found in DATA_DIR/torrent files/
        test_cases = ['single_file', 'multiple_files']

        for directory in test_cases:
            dirpath = os.path.join(DATA_DIR, 'files', directory)
            torrent_file = os.path.join(DATA_DIR, 'torrent_files', directory + '.torrent')

            with self.subTest(directory=directory):
                with open(torrent_file, "rb") as f:
                    m_target = bdecode(f.read())

                piece_length = m_target[b'info'][b'piece length']
                announce_list = [['http://example.com:8080/announce']]
                m_computed = metainfo(dirpath, piece_length, announce_list)

                if b'files' in m_target[b'info']:
                    info_keys = [b'files']
                else:
                    info_keys = [b'length']
                info_keys += [b'pieces']

                for key in info_keys:
                    self.assertEqual(m_computed[b'info'][key], m_target[b'info'][key])

    def test_init_files(self):
        """Check the behaviour of the function for various starting directories"""
        source_dir = os.path.join(DATA_DIR, 'files', 'multiple_files')
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        torrent_file = os.path.join(DATA_DIR, 'torrent_files', 'multiple_files.torrent')

        with self.subTest(case='All files missing'):
            """Create a torrent instance in an empty directory, check that it is populated as 
            described in the torrent file"""
            tmp_dir = tempfile.mkdtemp()
            coroutine = Torrent.create(torrent_file, tmp_dir)
            t = loop.run_until_complete(coroutine)
            loop.run_until_complete(t.stop())

            # Check that each file and directory in the source directory has been created
            for dirpath, dirnames, filenames in os.walk(source_dir):
                for source_item in dirnames + filenames:
                    tmp_item = os.path.join(dirpath.replace(source_dir, tmp_dir), source_item)
                    self.assertTrue(os.path.exists(tmp_item))

            shutil.rmtree(tmp_dir)

        with self.subTest(case='Files already downloaded'):
            """Get a copy of files from DATA_DIR/files/multiple_files/ and start a Torrent 
            instance with these files"""
            tmp_dir = tempfile.mkdtemp()
            target_dir = os.path.join(tmp_dir, 'multiple_files')
            shutil.copytree(source_dir, target_dir)
            coroutine = Torrent.create(torrent_file, target_dir)
            t = loop.run_until_complete(coroutine)

            valid_pieces = set(range(14))
            self.assertEqual(t.piece_manager.pieces, valid_pieces)

            loop.run_until_complete(t.stop())
            shutil.rmtree(tmp_dir)

        with self.subTest(case='Files partially downloaded'):
            """Get a copy of files from DATA_DIR/files/multiple_files/ and override a few bytes
            of each file to simulate a partial download"""
            tmp_dir = tempfile.mkdtemp()
            target_dir = os.path.join(tmp_dir, 'multiple_files')
            shutil.copytree(source_dir, target_dir)

            # ------------ TORRENT LAYOUT ------------
            #  File               | Size    | Pieces
            # --------------------+---------+---------
            # dir1/dir2/file3.dat |  12430  |   0
            # dir1/file2.dat      | 100653  | 0-6
            # file1.dat           | 100673  | 6-13
            #                     |         |

            # Overwrite the first few bytes of each file to invalidate pieces 0 and 6 :
            for dirpath, _, filenames in os.walk(target_dir):
                for filename in filenames:
                    with open(os.path.join(dirpath, filename), "rb+") as file:
                        file.seek(0)
                        file.write(b"PyTo")

            coroutine = Torrent.create(torrent_file, target_dir)
            t = loop.run_until_complete(coroutine)

            valid_pieces = set(range(14)) - {0, 6}
            self.assertEqual(t.piece_manager.pieces, valid_pieces)

            loop.run_until_complete(t.stop())
            shutil.rmtree(tmp_dir)

        loop.stop()
        loop.close()


class TestTorrentCreation(unittest.TestCase):
    def test_from_file(self):
        """Create a torrent instance for various torrent files"""
        torrent_dir = os.path.join(DATA_DIR, "torrent_files")
        for file in os.listdir(torrent_dir):
            filename = os.path.join(torrent_dir, os.fsdecode(file))
            with self.subTest(filename=filename):
                Torrent._from_file(filename)

    # TODO
    def test_get_peers(self):
        pass


if __name__ == '__main__':
    unittest.main()
